AudioWorkletProcessor.prototype._O3=function(){this._P3=true;this.port.onmessage=(_Q3)=>{if(_Q3.data==="kill")this._P3=false;};};class _R3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._O3();}process(_S3,_T3,parameters){const input=_S3[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _U3=input[c];for(let _V3=0;_V3<_U3.length;++_V3){const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];
_T3[_W3][c][_V3]=_U3[_V3];}}return this._P3;}}class _X3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._O3();}process(_S3,_T3,parameters){const _Y3=_S3[0];const _Z3=_S3[1];const output=_T3[0];const gain=parameters.gain;for(let c=0;c<_Z3.length;++c){const _U3=_Z3[c];const __3=output[c];for(let _V3=0;_V3<_U3.length;++_V3)__3[_V3]=_U3[_V3];}for(let c=0;c<_Y3.length;++c){const _U3=_Y3[c];const __3=output[c];
for(let _V3=0;_V3<_U3.length;++_V3){const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];__3[_V3]+=_U3[_V3]*_04;}}return this._P3;}}registerProcessor("audio-bus-input",_R3);registerProcessor("audio-bus-output",_X3);class _14 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _24=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_34){super();this._O3();const _44=_34.outputChannelCount[0];this._54=new Float32Array(_44);this._64=new Uint32Array(_44);}process(_S3,_T3,parameters){const input=_S3[0];const output=_T3[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _U3=input[c];const __3=output[c];for(let _V3=0;_V3<_U3.length;++_V3){__3[_V3]=_U3[_V3];if(this._64[c]===0)this._54[c]=_U3[_V3];const _74=(factor[_V3]!==undefined)?factor[_V3]:factor[0];++this._64[c];this._64[c]%=_74;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];if(_W3>0.0){continue;}let _84=this._54[c];const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];_84*=_04;_84=Math.max(Math.min(_84,
1.0),-1.0);const _94=(resolution[_V3]!==undefined)?resolution[_V3]:resolution[0];const max=(_84>0.0)?_14._24[_94]-1:_14._24[_94];_84=Math.round(_84*max)/max;const _a4=(mix[_V3]!==undefined)?mix[_V3]:mix[0];__3[_V3]*=(1.0-_a4);__3[_V3]+=(_84*_a4);}}return this._P3;}}registerProcessor("bitcrusher-processor",_14);class _b4{constructor(_c4=1e-3){this.setTime(_c4);}setTime(_c4){this._d4=Math.exp(-1/(_c4*sampleRate));}process(_e4,_f4){return _e4+this._d4*(_f4-_e4);}}class _g4{constructor(_h4,_i4){this._j4=new _b4(_h4);
this._k4=new _b4(_i4);this._l4=_h4;this._m4=_i4;}_n4(_c4){if(_c4===this._l4)return;this._j4.setTime(_c4);this._l4=_c4;}_o4(_c4){if(_c4===this._m4)return;this._k4.setTime(_c4);this._m4=_c4;}process(_e4,_f4){if(_e4>_f4)return this._j4.process(_e4,_f4);else return this._k4.process(_e4,_f4);}}class _p4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_q4){super();this._O3();const _j4=_p4.parameterDescriptors.find(_r4=>_r4.name==="attack");const _k4=_p4.parameterDescriptors.find(_r4=>_r4.name==="release");
this._s4=new _g4(_j4.defaultValue,_k4.defaultValue);this._t4=0;}process(_u4,_v4,_w4){const input=_u4[0];const output=_v4[0];const bypass=_w4.bypass;const ingain=_w4.ingain;const outgain=_w4.outgain;const threshold=_w4.threshold;const ratio=_w4.ratio;const attack=_w4.attack;const release=_w4.release;if(input.length===0)return this._P3;for(let _V3=0;_V3<input[0].length;++_V3){let frame=input.map(_x4=>_x4[_V3]);output.forEach((_x4,_y4)=>{_x4[_V3]=frame[_y4];});const _z4=(ingain[_V3]!==undefined)?ingain[_V3]:ingain[0];
frame=frame.map(_A4=>_A4*=_z4);const rect=frame.map(_A4=>Math.abs(_A4));const max=Math.max(...rect);const _B4=_C4(max);const _D4=(threshold[_V3]!==undefined)?threshold[_V3]:threshold[0];const _E4=_C4(_D4);const _F4=Math.max(0,_B4-_E4);const _j4=(attack[_V3]!==undefined)?attack[_V3]:attack[0];const _k4=(release[_V3]!==undefined)?release[_V3]:release[0];this._s4._n4(_j4);this._s4._o4(_k4);this._t4=this._s4.process(_F4,this._t4);const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];if(_W3>0)continue;const _94=(ratio[_V3]!==undefined)?ratio[_V3]:ratio[0];
const _G4=(this._t4/_94)-this._t4;const _04=_H4(_G4);frame=frame.map(_A4=>_A4*=_04);const _I4=(outgain[_V3]!==undefined)?outgain[_V3]:outgain[0];frame=frame.map(_A4=>_A4*=_I4);output.forEach((_x4,_y4)=>{_x4[_V3]=frame[_y4];});}return this._P3;}}function _C4(_J4){return 20*Math.log10(_J4);}function _H4(_J4){return Math.pow(10,_J4/20);}registerProcessor("compressor-processor",_p4);class _K4 extends AudioWorkletProcessor{static _L4=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_K4._L4},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_34){super();this._O3();const _44=_34.outputChannelCount[0];const _M4=(_K4._L4*sampleRate)+1;this.buffer=new Array(_44);this._N4=new Uint32Array(_44);for(let c=0;c<_44;++c)this.buffer[c]=new Float32Array(_M4);
}process(_S3,_T3,parameters){const input=_S3[0];const output=_T3[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _U3=input[c];const __3=output[c];for(let _V3=0;_V3<_U3.length;++_V3){__3[_V3]=_U3[_V3];const _D4=(time[_V3]!==undefined)?time[_V3]:time[0];const _O4=this._P4(c,_D4);const _74=(feedback[_V3]!==undefined)?feedback[_V3]:feedback[0];const _Q4=_U3[_V3]+(_O4*_74);this.write(c,_Q4);const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];
if(_W3>0.0){continue;}const _a4=(mix[_V3]!==undefined)?mix[_V3]:mix[0];__3[_V3]*=(1-_a4);__3[_V3]+=(_O4*_a4);}}return this._P3;}_P4(_R4,_c4){const _S4=_c4*sampleRate;let _T4=(this._N4[_R4]-~~_S4);let _U4=(_T4-1);while(_T4<0)_T4+=this.buffer[_R4].length;while(_U4<0)_U4+=this.buffer[_R4].length;const frac=_S4-~~_S4;const _V4=this.buffer[_R4][_T4];const _W4=this.buffer[_R4][_U4];return _V4+(_W4-_V4)*frac;}write(_R4,_X4){++this._N4[_R4];this._N4[_R4]%=this.buffer[_R4].length;this.buffer[_R4][this._N4[_R4]]=_X4;
}}registerProcessor("delay-processor",_K4);class _Y4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._O3();}process(_Z4,__4,_05){const input=_Z4[0];const _15=__4[0];const _25=__4[1];for(let c=0;c<input.length;++c){const _U3=input[c];const _35=_15[c];const _45=_25[c];for(let _V3=0;_V3<_U3.length;++_V3){_35[_V3]=_U3[_V3];_45[_V3]=_U3[_V3];}}return this._P3;}}class _55 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._O3();}process(_Z4,__4,_05){const _Y3=_Z4[0];const _Z3=_Z4[1];const output=__4[0];const bypass=_05.bypass;for(let c=0;c<_Z3.length;++c){const _65=_Y3[c];const _75=_Z3[c];const __3=output[c];for(let _V3=0;_V3<_65.length;++_V3){const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];if(_W3>0){__3[_V3]=_75[_V3];}else {__3[_V3]=_65[_V3];}}}return this._P3;}}registerProcessor("eq-input",_Y4);registerProcessor("eq-output",_55);class _85 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._O3();}process(_S3,_T3,parameters){const input=_S3[0];const output=_T3[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _U3=input[c];const __3=output[c];for(let _V3=0;_V3<_U3.length;++_V3){__3[_V3]=_U3[_V3];const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];
if(_W3>0.0){continue;}const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];__3[_V3]*=_04;}}return this._P3;}}registerProcessor("gain-processor",_85);class _95 extends AudioWorkletProcessor{static get parameterDescriptors(){const _a5=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_a5),minValue:10.0,maxValue:_a5},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,
maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_34){super();this._O3();const _44=_34.outputChannelCount[0];this._b5=0;this._c5=0;this._d5=0;this._e5=0;this._f5=0;this._g5=new Float32Array(_44);this._h5=new Float32Array(_44);this._i5=new Float32Array(_44);this._j5=new Float32Array(_44);this._k5=-1;this._l5=-1;this._m5=-1;}process(_S3,_T3,parameters){const input=_S3[0];const output=_T3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;
const gain=parameters.gain;const _n5=(freq.length===1&&q.length===1&&gain.length===1);if(_n5)this._o5(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _U3=input[c];const __3=output[c];for(let _V3=0;_V3<_U3.length;++_V3){if(_n5===false){const _74=(freq[_V3]!==undefined)?freq[_V3]:freq[0];const _p5=(q[_V3]!==undefined)?q[_V3]:q[0];const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];this._o5(_74,_p5,_04);}const _q5=this._d5*_U3[_V3]+this._e5*this._g5[c]+this._f5*this._h5[c]-this._b5*this._i5[c]-this._c5*this._j5[c];
this._h5[c]=this._g5[c];this._g5[c]=_U3[_V3];this._j5[c]=this._i5[c];this._i5[c]=_q5;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];__3[_V3]=(_W3>0)?_U3[_V3]:_q5;}}return this._P3;}_o5(_r5,_s5,_t5){if(_r5===this._k5&&_s5===this._l5&&_t5===this._m5)return;const _u5=2*Math.PI*_r5/sampleRate;const _v5=Math.cos(_u5);const _w5=Math.sqrt(_t5);const _x5=_w5+1;const _y5=_w5-1;const _z5=_x5*_v5;const _A5=_y5*_v5;const _B5=_x5-_A5;const _C5=_x5+_A5;const alpha=Math.sin(_u5)/(2*_s5);const _D5=(2*Math.sqrt(_w5)*alpha);
const _E5=_B5+_D5;const _b5=2*(_y5-_z5);const _c5=_B5-_D5;const _d5=_w5*(_C5+_D5);const _e5=-2*_w5*(_y5+_z5);const _f5=_w5*(_C5-_D5);this._b5=_b5/_E5;this._c5=_c5/_E5;this._d5=_d5/_E5;this._e5=_e5/_E5;this._f5=_f5/_E5;this._k5=_r5;this._l5=_s5;this._m5=_t5;}}registerProcessor("hi-shelf-processor",_95);class _F5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _G5=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",
automationRate:"a-rate",defaultValue:Math.min(1500.0,_G5),minValue:10.0,maxValue:_G5},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_34){super();this._O3();const _44=_34.outputChannelCount[0];this._b5=0;this._c5=0;this._d5=0;this._e5=0;this._f5=0;this._g5=new Float32Array(_44);this._h5=new Float32Array(_44);this._i5=new Float32Array(_44);this._j5=new Float32Array(_44);this._H5=-1;this._l5=-1;}process(_S3,_T3,parameters){const input=_S3[0];const output=_T3[0];
const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _n5=(cutoff.length===1&&q.length===1);if(_n5)this._o5(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _U3=input[c];const __3=output[c];for(let _V3=0;_V3<_U3.length;++_V3){if(_n5===false){const c=(cutoff[_V3]!==undefined)?cutoff[_V3]:cutoff[0];const _p5=(q[_V3]!==undefined)?q[_V3]:q[0];this._o5(c,_p5);}const _q5=this._d5*_U3[_V3]+this._e5*this._g5[c]+this._f5*this._h5[c]-this._b5*this._i5[c]-this._c5*this._j5[c];this._h5[c]=this._g5[c];
this._g5[c]=_U3[_V3];this._j5[c]=this._i5[c];this._i5[c]=_q5;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];__3[_V3]=(_W3>0)?_U3[_V3]:_q5;}}return this._P3;}_o5(_I5,_s5){if(_I5===this._H5&&_s5===this._l5)return;const _u5=2*Math.PI*_I5/sampleRate;const alpha=Math.sin(_u5)/(2*_s5);const _v5=Math.cos(_u5);const _E5=1+alpha;const _b5=-2*_v5;const _c5=1-alpha;const _d5=(1+_v5)/2;const _e5=-1-_v5;const _f5=(1+_v5)/2;this._b5=_b5/_E5;this._c5=_c5/_E5;this._d5=_d5/_E5;this._e5=_e5/_E5;this._f5=_f5/_E5;this._H5=_I5;
this._l5=_s5;}}registerProcessor("hpf2-processor",_F5);class _J5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _a5=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_a5),minValue:10.0,maxValue:_a5},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}
constructor(_34){super();this._O3();const _44=_34.outputChannelCount[0];this._b5=0;this._c5=0;this._d5=0;this._e5=0;this._f5=0;this._g5=new Float32Array(_44);this._h5=new Float32Array(_44);this._i5=new Float32Array(_44);this._j5=new Float32Array(_44);this._k5=-1;this._l5=-1;this._m5=-1;}process(_S3,_T3,parameters){const input=_S3[0];const output=_T3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _n5=(freq.length===1&&q.length===1&&gain.length===1);
if(_n5)this._o5(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _U3=input[c];const __3=output[c];for(let _V3=0;_V3<_U3.length;++_V3){if(_n5===false){const _74=(freq[_V3]!==undefined)?freq[_V3]:freq[0];const _p5=(q[_V3]!==undefined)?q[_V3]:q[0];const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];this._o5(_74,_p5,_04);}const _q5=this._d5*_U3[_V3]+this._e5*this._g5[c]+this._f5*this._h5[c]-this._b5*this._i5[c]-this._c5*this._j5[c];this._h5[c]=this._g5[c];this._g5[c]=_U3[_V3];this._j5[c]=this._i5[c];
this._i5[c]=_q5;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];__3[_V3]=(_W3>0)?_U3[_V3]:_q5;}}return this._P3;}_o5(_r5,_s5,_t5){if(_r5===this._k5&&_s5===this._l5&&_t5===this._m5)return;const _u5=2*Math.PI*_r5/sampleRate;const _v5=Math.cos(_u5);const _w5=Math.sqrt(_t5);const _x5=_w5+1;const _y5=_w5-1;const _z5=_x5*_v5;const _A5=_y5*_v5;const _B5=_x5-_A5;const _C5=_x5+_A5;const alpha=Math.sin(_u5)/(2*_s5);const _D5=(2*Math.sqrt(_w5)*alpha);const _E5=_C5+_D5;const _b5=-2*(_y5+_z5);const _c5=_C5-_D5;const _d5=_w5*(_B5+_D5);
const _e5=2*_w5*(_y5-_z5);const _f5=_w5*(_B5-_D5);this._b5=_b5/_E5;this._c5=_c5/_E5;this._d5=_d5/_E5;this._e5=_e5/_E5;this._f5=_f5/_E5;this._k5=_r5;this._l5=_s5;this._m5=_t5;}}registerProcessor("lo-shelf-processor",_J5);class _K5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _G5=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_G5),minValue:10.0,maxValue:_G5}
,{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_34){super();this._O3();const _44=_34.outputChannelCount[0];this._b5=0;this._c5=0;this._d5=0;this._e5=0;this._f5=0;this._g5=new Float32Array(_44);this._h5=new Float32Array(_44);this._i5=new Float32Array(_44);this._j5=new Float32Array(_44);this._H5=-1;this._l5=-1;}process(_S3,_T3,parameters){const input=_S3[0];const output=_T3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _n5=(cutoff.length===1&&q.length===1);
if(_n5)this._o5(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _U3=input[c];const __3=output[c];for(let _V3=0;_V3<_U3.length;++_V3){if(_n5===false){const c=(cutoff[_V3]!==undefined)?cutoff[_V3]:cutoff[0];const _p5=(q[_V3]!==undefined)?q[_V3]:q[0];this._o5(c,_p5);}const _q5=this._d5*_U3[_V3]+this._e5*this._g5[c]+this._f5*this._h5[c]-this._b5*this._i5[c]-this._c5*this._j5[c];this._h5[c]=this._g5[c];this._g5[c]=_U3[_V3];this._j5[c]=this._i5[c];this._i5[c]=_q5;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];
__3[_V3]=(_W3>0)?_U3[_V3]:_q5;}}return this._P3;}_o5(_I5,_s5){if(_I5===this._H5&&_s5===this._l5)return;const _u5=2*Math.PI*_I5/sampleRate;const alpha=Math.sin(_u5)/(2*_s5);const _v5=Math.cos(_u5);const _E5=1+alpha;const _b5=-2*_v5;const _c5=1-alpha;const _d5=(1-_v5)/2;const _e5=1-_v5;const _f5=(1-_v5)/2;this._b5=_b5/_E5;this._c5=_c5/_E5;this._d5=_d5/_E5;this._e5=_e5/_E5;this._f5=_f5/_E5;this._H5=_I5;this._l5=_s5;}}registerProcessor("lpf2-processor",_K5);class _L5 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _a5=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_a5),minValue:10.0,maxValue:_a5},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_34){super();this._O3();const _44=_34.outputChannelCount[0];this._b5=0;this._c5=0;this._d5=0;this._e5=0;this._f5=0;
this._g5=new Float32Array(_44);this._h5=new Float32Array(_44);this._i5=new Float32Array(_44);this._j5=new Float32Array(_44);this._k5=-1;this._l5=-1;this._m5=-1;}process(_S3,_T3,parameters){const input=_S3[0];const output=_T3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _n5=(freq.length===1&&q.length===1&&gain.length===1);if(_n5)this._o5(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _U3=input[c];const __3=output[c];for(let _V3=0;
_V3<_U3.length;++_V3){if(_n5===false){const _74=(freq[_V3]!==undefined)?freq[_V3]:freq[0];const _p5=(q[_V3]!==undefined)?q[_V3]:q[0];const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];this._o5(_74,_p5,_04);}const _q5=this._d5*_U3[_V3]+this._e5*this._g5[c]+this._f5*this._h5[c]-this._b5*this._i5[c]-this._c5*this._j5[c];this._h5[c]=this._g5[c];this._g5[c]=_U3[_V3];this._j5[c]=this._i5[c];this._i5[c]=_q5;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];__3[_V3]=(_W3>0)?_U3[_V3]:_q5;}}return this._P3;
}_o5(_r5,_s5,_t5){if(_r5===this._k5&&_s5===this._l5&&_t5===this._m5)return;const _u5=2*Math.PI*_r5/sampleRate;const _v5=Math.cos(_u5);const _w5=Math.sqrt(_t5);const alpha=Math.sin(_u5)/(2*_s5);const _M5=alpha/_w5;const _N5=alpha*_w5;const _E5=1+_M5;const _b5=-2*_v5;const _c5=1-_M5;const _d5=1+_N5;const _e5=_b5;const _f5=1-_N5;this._b5=_b5/_E5;this._c5=_c5/_E5;this._d5=_d5/_E5;this._e5=_e5/_E5;this._f5=_f5/_E5;this._k5=_r5;this._l5=_s5;this._m5=_t5;}}registerProcessor("peak-eq-processor",_L5);class _O5{constructor(_P5){
this._Q5=0;this._R5=0;this.feedback=0;this._S5=0;this.buffer=new Float32Array(_P5);this._T5=0;}process(_X4){const out=this.buffer[this._T5];this._S5=(this._S5*this._Q5)+(out*this._R5);this.buffer[this._T5]=_X4+(this._S5*this.feedback);++this._T5;this._T5%=this.buffer.length;return out;}_U5(_V5){this.feedback=Math.min(Math.max(0,_V5),1);}_W5(_X5){this._Q5=Math.min(Math.max(0,_X5),1);this._R5=1-this._Q5;}}class _Y5{constructor(_P5){this.feedback=0;this.buffer=new Float32Array(_P5);this._T5=0;}process(_X4){
const out=this.buffer[this._T5];this.buffer[this._T5]=_X4+(out*this.feedback);++this._T5;this._T5%=this.buffer.length;return(out-_X4);}_U5(_V5){this.feedback=Math.min(Math.max(0,_V5),1);}}class _Z5 extends AudioWorkletProcessor{static __5=8;static _06=4;static _16=0.015;static _26=0.4;static _36=0.28;static _46=0.7;static _56=[1116,1188,1277,1356,1422,1491,1557,1617];static _66=[1139,1211,1300,1379,1445,1514,1580,1640];static _76=[556,441,341,225];static _86=[579,464,364,248];static get parameterDescriptors(){return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_34){super();this._O3();const _44=_34.outputChannelCount[0];this._96=-1;this._a6=-1;this._b6=new Array(_44);this._c6=new Array(_44);const _d6=[_Z5._56,_Z5._66];const _e6=[_Z5._76,
_Z5._86];for(let c=0;c<_44;++c){this._b6[c]=new Array(_Z5.__5);this._c6[c]=new Array(_Z5._06);for(let i=0;i<_Z5.__5;++i)this._b6[c][i]=new _O5(_d6[c%_d6.length][i]);for(let i=0;i<_Z5._06;++i)this._c6[c][i]=new _Y5(_e6[c%_e6.length][i]);}this._f6(0.5);this._W5(0.5);for(let c=0;c<_44;++c)for(let i=0;i<_Z5._06;++i)this._c6[c][i]._U5(0.5);}process(_S3,_T3,parameters){const input=_S3[0];const output=_T3[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;
for(let c=0;c<input.length;++c){const _U3=input[c];const __3=output[c];for(let _g6=0;_g6<_U3.length;++_g6){const _V3=(size[_g6]!==undefined)?size[_g6]:size[0];const _h6=(damp[_g6]!==undefined)?damp[_g6]:damp[0];this._f6(_V3);this._W5(_h6);__3[_g6]=_U3[_g6];let out=0;const _84=_U3[_g6]*_Z5._16;for(let i=0;i<_Z5.__5;++i)out+=this._b6[c][i].process(_84);for(let i=0;i<_Z5._06;++i)out=this._c6[c][i].process(out);const _W3=(bypass[_g6]!==undefined)?bypass[_g6]:bypass[0];if(_W3>0.0){continue;}const _a4=(mix[_g6]!==undefined)?mix[_g6]:mix[0];
__3[_g6]*=(1-_a4);__3[_g6]+=(out*_a4);}}return this._P3;}_f6(_P5){if(_P5===this._96)return;const size=(_P5*_Z5._36)+_Z5._46;for(let c=0;c<this._b6.length;++c)for(let i=0;i<_Z5.__5;++i)this._b6[c][i]._U5(size);this._96=_P5;}_W5(_X5){if(_X5===this._a6)return;const damp=_X5*_Z5._26;for(let c=0;c<this._b6.length;++c)for(let i=0;i<_Z5.__5;++i)this._b6[c][i]._W5(damp);this._a6=_X5;}}registerProcessor("reverb1-processor",_Z5);class _i6 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",
automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_34){super();this._O3();const _44=_34.outputChannelCount[0];this._j6=new Array(_44).fill(1.0);this._k6=new Array(_44).fill(0.0);
this._l6=new Array(_44).fill(_m6._n6._o6);this._p6=new Array(_44);for(let c=0;c<_44;++c){this._p6[c]=new _q6();this._p6[c]._r6(sampleRate);this._p6[c]._s6(this._j6[c]);this._p6[c]._t6(this._l6[c]);if(c%2===1){this._p6[c]._u6(this._k6[c]);}}}process(_S3,_T3,parameters){const input=_S3[0];const output=_T3[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _U3=input[c];
const __3=output[c];for(let _V3=0;_V3<_U3.length;++_V3){__3[_V3]=_U3[_V3];const _94=(rate[_V3]!==undefined)?rate[_V3]:rate[0];const _v6=(offset[_V3]!==undefined)?offset[_V3]:offset[0];const _w6=(shape[_V3]!==undefined)?shape[_V3]:shape[0];this._x6(c,_94,_v6,_w6);const _y6=this._p6[c]._P4();const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];if(_W3>0.0){continue;}const i=(intensity[_V3]!==undefined)?intensity[_V3]:intensity[0];const out=_U3[_V3]*_y6*i;__3[_V3]*=(1.0-i);__3[_V3]+=out;}}return this._P3;
}_x6(_R4,_z6,_A6,_B6){if(_z6!==this._j6[_R4]){this._p6[_R4]._s6(_z6);this._j6[_R4]=_z6;}if(_A6!==this._k6[_R4]){if(_R4%2===1){this._p6[_R4]._u6(_A6);}this._k6[_R4]=_A6;}if(_B6!==this._l6[_R4]){this._p6[_R4]._t6(_B6);this._l6[_R4]=_B6;}}}registerProcessor("tremolo-processor",_i6);function _m6(){}_m6._n6={_o6:0,_C6:1,_D6:2,_E6:3,_F6:4,_G6:5};_m6._H6=function(_I6){return 1.0-_I6;};_m6._J6=function(_I6){return _I6;};_m6._K6=function(_I6){return 0.5*(Math.sin((_I6*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_m6._L6=function(_I6){
if(_I6<0.5){return 0.0;}return 1.0;};_m6._M6=function(_I6){if(_I6<0.5){return 2.0*_I6;}return 2.0-(2.0*_I6);};_m6._N6=[_m6._H6,_m6._J6,_m6._K6,_m6._L6,_m6._M6];_O6._P6=512;_O6._Q6=1.0/_O6._P6;function _O6(_R6){this.data=new Float32Array(_O6._P6);for(let i=0;i<_O6._P6;++i){this.data[i]=_R6(i*_O6._Q6);}}_O6.prototype._P4=function(_I6){_I6=Math.max(0.0,_I6);_I6=Math.min(_I6,1.0);const _S6=_I6*_O6._P6;const _T6=~~_S6;const _U6=_S6-_T6;let _T4=_T6;let _U4=_T4+1;if(_T4>=_O6._P6){_T4-=_O6._P6;}if(_U4>=_O6._P6){_U4-=_O6._P6;
}const _V4=this.data[_T4];const _W4=this.data[_U4];return _V4+(_W4-_V4)*_U6;};_q6._V6=[];_q6._W6=false;_q6._X6=0.0;_q6._a5=20.0;function _q6(){this._Y6=48000;this.shape=_m6._n6._D6;this.freq=1.0;this._Z6=0.0;this._Q6=0.0;this.__6=0.0;if(_q6._W6==true){return;}for(let i=0;i<_m6._n6._G6;++i){_q6._V6[i]=new _O6(_m6._N6[i]);}_q6._W6=true;}_q6._07=function(){return(_q6._W6==true);};_q6.prototype._r6=function(_17){this._Y6=_17;this._27();};_q6.prototype._s6=function(_r5){_r5=Math.max(_q6._X6,_r5);_r5=Math.min(_r5,
_q6._a5);this.freq=_r5;this._27();};_q6.prototype._u6=function(_A6){_A6=Math.max(0.0,_A6);_A6=Math.min(_A6,1.0);const _37=_A6-this.__6;this.__6=_A6;this._Z6+=_37;while(this._Z6>=1.0){this._Z6-=1.0;}while(this._Z6<0.0){this._Z6+=1.0;}};_q6.prototype._t6=function(_B6){_B6=Math.max(0,_B6);_B6=Math.min(_B6,_m6._n6._G6-1);this.shape=_B6;};_q6.prototype._P4=function(){const result=_q6._V6[this.shape]._P4(this._Z6);this._Z6+=this._Q6;while(this._Z6>=1.0){this._Z6-=1.0;}return result;};_q6.prototype._27=function(){
this._Q6=this.freq/this._Y6;};